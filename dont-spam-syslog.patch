diff -up gdm-2.30.4/common/gdm-log.c.dont-spam-syslog gdm-2.30.4/common/gdm-log.c
--- gdm-2.30.4/common/gdm-log.c.dont-spam-syslog	2010-06-16 12:32:38.000000000 -0400
+++ gdm-2.30.4/common/gdm-log.c	2012-09-25 23:58:34.862271914 -0400
@@ -25,74 +25,93 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
+#include <stdlib.h>
 #include <signal.h>
 #include <time.h>
 #include <unistd.h>
-
-#include <syslog.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 
 #include <glib.h>
 #include <glib/gstdio.h>
 
 #include "gdm-log.h"
+#include "gdm-common-unknown-origin.h"
+
+#define MAX_LOGS 5
 
 static gboolean initialized = FALSE;
-static int      syslog_levels = (G_LOG_LEVEL_ERROR | G_LOG_LEVEL_CRITICAL | G_LOG_LEVEL_WARNING);
+static gboolean enabled = FALSE;
+static int log_levels = (G_LOG_LEVEL_ERROR | G_LOG_LEVEL_CRITICAL | G_LOG_LEVEL_WARNING);
+static char *log_path = NULL;
+static int log_fd = -1;
+
+static void
+rotate_logs (const char *path,
+             guint       n_copies)
+{
+        int i;
+
+        for (i = n_copies - 1; i > 0; i--) {
+                char *name_n;
+                char *name_n1;
+
+                name_n = g_strdup_printf ("%s.%d", path, i);
+                if (i > 1) {
+                        name_n1 = g_strdup_printf ("%s.%d", path, i - 1);
+                } else {
+                        name_n1 = g_strdup (path);
+                }
+
+                VE_IGNORE_EINTR (g_unlink (name_n));
+                VE_IGNORE_EINTR (g_rename (name_n1, name_n));
+
+                g_free (name_n1);
+                g_free (name_n);
+        }
+
+        VE_IGNORE_EINTR (g_unlink (path));
+}
 
 static void
-log_level_to_priority_and_prefix (GLogLevelFlags log_level,
-                                  int           *priorityp,
-                                  const char   **prefixp)
+log_level_to_prefix (GLogLevelFlags   log_level,
+                     const char     **prefixp)
 {
-        int         priority;
         const char *prefix;
 
-        /* Process the message prefix and priority */
+        /* Process the message prefix */
         switch (log_level & G_LOG_LEVEL_MASK) {
         case G_LOG_FLAG_FATAL:
-                priority = LOG_EMERG;
                 prefix = "FATAL";
                 break;
         case G_LOG_LEVEL_ERROR:
-                priority = LOG_ERR;
                 prefix = "ERROR";
                 break;
         case G_LOG_LEVEL_CRITICAL:
-                priority = LOG_CRIT;
                 prefix = "CRITICAL";
                 break;
         case G_LOG_LEVEL_WARNING:
-                priority = LOG_WARNING;
                 prefix = "WARNING";
                 break;
         case G_LOG_LEVEL_MESSAGE:
-                priority = LOG_NOTICE;
                 prefix = "MESSAGE";
                 break;
         case G_LOG_LEVEL_INFO:
-                priority = LOG_INFO;
                 prefix = "INFO";
                 break;
         case G_LOG_LEVEL_DEBUG:
-                /* if debug was requested then bump this up to ERROR
-                 * to ensure it is seen in a log */
-                if (syslog_levels & G_LOG_LEVEL_DEBUG) {
-                        priority = LOG_WARNING;
+                if (log_level & G_LOG_LEVEL_DEBUG) {
                         prefix = "DEBUG(+)";
                 } else {
-                        priority = LOG_DEBUG;
                         prefix = "DEBUG";
                 }
                 break;
         default:
-                priority = LOG_DEBUG;
                 prefix = "UNKNOWN";
                 break;
         }
 
-        if (priorityp != NULL) {
-                *priorityp = priority;
-        }
         if (prefixp != NULL) {
                 *prefixp = prefix;
         }
@@ -105,7 +124,6 @@ gdm_log_default_handler (const gchar   *
                          gpointer       unused_data)
 {
         GString     *gstring;
-        int          priority;
         const char  *level_prefix;
         char        *string;
         gboolean     do_log;
@@ -113,8 +131,8 @@ gdm_log_default_handler (const gchar   *
 
         is_fatal = (log_level & G_LOG_FLAG_FATAL) != 0;
 
-        do_log = (log_level & syslog_levels);
-        if (! do_log) {
+        do_log = (log_level & log_levels);
+        if (! do_log && !enabled) {
                 return;
         }
 
@@ -122,9 +140,16 @@ gdm_log_default_handler (const gchar   *
                 gdm_log_init ();
         }
 
-        log_level_to_priority_and_prefix (log_level,
-                                          &priority,
-                                          &level_prefix);
+        if (log_fd < 0) {
+                if (log_path != NULL) {
+                        log_fd = open (log_path, O_CREAT|O_APPEND|O_TRUNC|O_WRONLY|O_EXCL, 0644);
+                } else {
+                        log_fd = STDERR_FILENO;
+                }
+        }
+
+        log_level_to_prefix (log_level,
+                             &level_prefix);
 
         gstring = g_string_new (NULL);
 
@@ -146,21 +171,20 @@ gdm_log_default_handler (const gchar   *
                 g_string_append (gstring, "\n");
         }
 
-        string = g_string_free (gstring, FALSE);
+        write (log_fd, gstring->str,  gstring->len);
+        fsync (log_fd);
 
-        syslog (priority, "%s", string);
-
-        g_free (string);
+        g_string_free (gstring, TRUE);
 }
 
 void
 gdm_log_toggle_debug (void)
 {
-        if (syslog_levels & G_LOG_LEVEL_DEBUG) {
+        if (enabled) {
                 g_debug ("Debugging disabled");
-                syslog_levels &= ~G_LOG_LEVEL_DEBUG;
+                enabled = FALSE;
         } else {
-                syslog_levels |= G_LOG_LEVEL_DEBUG;
+                enabled = TRUE;
                 g_debug ("Debugging enabled");
         }
 }
@@ -168,31 +192,22 @@ gdm_log_toggle_debug (void)
 void
 gdm_log_set_debug (gboolean debug)
 {
-        if (debug) {
-                syslog_levels |= G_LOG_LEVEL_DEBUG;
-                g_debug ("Enabling debugging");
-        } else {
-                g_debug ("Disabling debugging");
-                syslog_levels &= ~G_LOG_LEVEL_DEBUG;
-        }
+	enabled = debug;
 }
 
 void
 gdm_log_init (void)
 {
         const char *prg_name;
-        int         options;
 
         g_log_set_default_handler (gdm_log_default_handler, NULL);
 
         prg_name = g_get_prgname ();
 
-        options = LOG_PID;
-#ifdef LOG_PERROR
-        options |= LOG_PERROR;
-#endif
-
-        openlog (prg_name, options, LOG_DAEMON);
+        if (g_strcmp0 (prg_name, "gdm-binary") == 0) {
+               log_path = g_build_filename (LOGDIR, prg_name, NULL);
+	        rotate_logs (log_path, MAX_LOGS);
+        }
 
         initialized = TRUE;
 }
@@ -200,7 +215,15 @@ gdm_log_init (void)
 void
 gdm_log_shutdown (void)
 {
-        closelog ();
         initialized = FALSE;
+
+        if (log_path != NULL) {
+                g_free (log_path);
+                log_path = NULL;
+        }
+        if (log_fd >= 0) {
+                close (log_fd);
+                log_fd = -1;
+        }
 }
